{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\siddh\\\\Desktop\\\\Sid\\\\Work\\\\Co-curriculars\\\\KiroHackathon\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport GameLobby from './components/GameLobby';\nimport GameRoom from './components/GameRoom';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nfunction App() {\n  _s();\n  const [gameState, setGameState] = useState('lobby'); // lobby, room, playing\n  const [roomId, setRoomId] = useState('');\n  const [players, setPlayers] = useState([]);\n  const [currentPlayer, setCurrentPlayer] = useState(null);\n  const [allReady, setAllReady] = useState(false);\n  const [gameData, setGameData] = useState(null);\n  useEffect(() => {\n    // Clean up any existing listeners first\n    socket.off('room_update');\n    socket.off('game_started');\n    socket.on('room_update', data => {\n      setPlayers(data.players);\n      setAllReady(data.allReady || false);\n\n      // Update game data if we're playing and have currentPromptGiver info\n      if (data.currentPromptGiver) {\n        setGameData(prevGameData => prevGameData ? {\n          ...prevGameData,\n          currentPromptGiver: data.currentPromptGiver\n        } : null);\n      }\n\n      // Only set to room state if we're not already playing\n      setGameState(currentState => {\n        if (currentState !== 'playing') {\n          return 'room';\n        }\n        return currentState;\n      });\n    });\n    socket.on('game_started', data => {\n      setGameState('playing');\n      setPlayers(data.players);\n      setGameData({\n        currentPromptGiver: data.currentPromptGiver,\n        round: data.round,\n        gameState: data.gameState || 'waiting_for_prompt',\n        timeRemaining: 30,\n        promptTimeRemaining: 30\n      });\n    });\n    return () => {\n      socket.off('room_update');\n      socket.off('game_started');\n    };\n  }, []); // Remove gameState dependency\n\n  const joinRoom = (name, room) => {\n    setRoomId(room);\n    setCurrentPlayer({\n      id: socket.id,\n      name\n    });\n    socket.emit('join_room', {\n      roomId: room,\n      playerName: name\n    });\n  };\n  const toggleReady = () => {\n    console.log('Toggle Ready clicked! Room ID:', roomId);\n    console.log('Socket connected:', socket.connected);\n    console.log('Socket ID:', socket.id);\n    socket.emit('toggle_ready', {\n      roomId\n    });\n    console.log('Emitted toggle_ready event');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"AI Prompt Guesser\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), gameState === 'lobby' && /*#__PURE__*/_jsxDEV(GameLobby, {\n      onJoinRoom: joinRoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), gameState === 'room' && /*#__PURE__*/_jsxDEV(GameRoom, {\n      players: players,\n      currentPlayer: currentPlayer,\n      roomId: roomId,\n      onToggleReady: toggleReady,\n      allReady: allReady,\n      socket: socket\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), gameState === 'playing' && /*#__PURE__*/_jsxDEV(GameRoom, {\n      players: players,\n      currentPlayer: currentPlayer,\n      roomId: roomId,\n      socket: socket,\n      isPlaying: true,\n      initialGameData: gameData,\n      onUpdatePlayers: setPlayers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Z2bKGeaKt/sbnuXQYWWQ12YH8sI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","io","GameLobby","GameRoom","jsxDEV","_jsxDEV","socket","App","_s","gameState","setGameState","roomId","setRoomId","players","setPlayers","currentPlayer","setCurrentPlayer","allReady","setAllReady","gameData","setGameData","off","on","data","currentPromptGiver","prevGameData","currentState","round","timeRemaining","promptTimeRemaining","joinRoom","name","room","id","emit","playerName","toggleReady","console","log","connected","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onJoinRoom","onToggleReady","isPlaying","initialGameData","onUpdatePlayers","_c","$RefreshReg$"],"sources":["C:/Users/siddh/Desktop/Sid/Work/Co-curriculars/KiroHackathon/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport GameLobby from './components/GameLobby';\r\nimport GameRoom from './components/GameRoom';\r\nimport './App.css';\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nfunction App() {\r\n  const [gameState, setGameState] = useState('lobby'); // lobby, room, playing\r\n  const [roomId, setRoomId] = useState('');\r\n  const [players, setPlayers] = useState([]);\r\n  const [currentPlayer, setCurrentPlayer] = useState(null);\r\n  const [allReady, setAllReady] = useState(false);\r\n  const [gameData, setGameData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Clean up any existing listeners first\r\n    socket.off('room_update');\r\n    socket.off('game_started');\r\n\r\n    socket.on('room_update', (data) => {\r\n      setPlayers(data.players);\r\n      setAllReady(data.allReady || false);\r\n      \r\n      // Update game data if we're playing and have currentPromptGiver info\r\n      if (data.currentPromptGiver) {\r\n        setGameData(prevGameData => prevGameData ? {\r\n          ...prevGameData,\r\n          currentPromptGiver: data.currentPromptGiver\r\n        } : null);\r\n      }\r\n      \r\n      // Only set to room state if we're not already playing\r\n      setGameState(currentState => {\r\n        if (currentState !== 'playing') {\r\n          return 'room';\r\n        }\r\n        return currentState;\r\n      });\r\n    });\r\n\r\n    socket.on('game_started', (data) => {\r\n      setGameState('playing');\r\n      setPlayers(data.players);\r\n      setGameData({\r\n        currentPromptGiver: data.currentPromptGiver,\r\n        round: data.round,\r\n        gameState: data.gameState || 'waiting_for_prompt',\r\n        timeRemaining: 30,\r\n        promptTimeRemaining: 30\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      socket.off('room_update');\r\n      socket.off('game_started');\r\n    };\r\n  }, []); // Remove gameState dependency\r\n\r\n  const joinRoom = (name, room) => {\r\n    setRoomId(room);\r\n    setCurrentPlayer({ id: socket.id, name });\r\n    socket.emit('join_room', { roomId: room, playerName: name });\r\n  };\r\n\r\n  const toggleReady = () => {\r\n    console.log('Toggle Ready clicked! Room ID:', roomId);\r\n    console.log('Socket connected:', socket.connected);\r\n    console.log('Socket ID:', socket.id);\r\n    socket.emit('toggle_ready', { roomId });\r\n    console.log('Emitted toggle_ready event');\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>AI Prompt Guesser</h1>\r\n      </header>\r\n      \r\n      {gameState === 'lobby' && (\r\n        <GameLobby onJoinRoom={joinRoom} />\r\n      )}\r\n      \r\n      {gameState === 'room' && (\r\n        <GameRoom \r\n          players={players}\r\n          currentPlayer={currentPlayer}\r\n          roomId={roomId}\r\n          onToggleReady={toggleReady}\r\n          allReady={allReady}\r\n          socket={socket}\r\n        />\r\n      )}\r\n      \r\n      {gameState === 'playing' && (\r\n        <GameRoom \r\n          players={players}\r\n          currentPlayer={currentPlayer}\r\n          roomId={roomId}\r\n          socket={socket}\r\n          isPlaying={true}\r\n          initialGameData={gameData}\r\n          onUpdatePlayers={setPlayers}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}