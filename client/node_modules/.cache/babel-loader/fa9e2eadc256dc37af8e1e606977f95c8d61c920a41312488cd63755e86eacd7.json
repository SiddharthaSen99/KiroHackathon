{"ast":null,"code":"class SoundManager {\n  constructor() {\n    this.sounds = {};\n    this.enabled = true;\n    this.volume = 0.7;\n    this.initializeSounds();\n  }\n  initializeSounds() {\n    // Create audio contexts for different sound effects\n    this.sounds = {\n      playerJoin: this.createBeepSound(800, 0.1, 'sine'),\n      playerReady: this.createBeepSound(600, 0.15, 'square'),\n      allReady: this.createChord([523, 659, 784], 0.3),\n      // C major chord\n      gameStart: this.createFanfare(),\n      promptSubmitted: this.createBeepSound(1000, 0.2, 'triangle'),\n      guessSubmitted: this.createBeepSound(400, 0.1, 'sawtooth'),\n      roundEnd: this.createSuccessSound(),\n      gameEnd: this.createVictoryFanfare(),\n      countdown: this.createCountdownSound()\n    };\n  }\n  createBeepSound(frequency, duration, waveType = 'sine') {\n    return () => {\n      if (!this.enabled) return;\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);\n      oscillator.type = waveType;\n      gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n      gainNode.gain.linearRampToValueAtTime(this.volume * 0.3, audioContext.currentTime + 0.01);\n      gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);\n      oscillator.start(audioContext.currentTime);\n      oscillator.stop(audioContext.currentTime + duration);\n    };\n  }\n  createChord(frequencies, duration) {\n    return () => {\n      if (!this.enabled) return;\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      frequencies.forEach((freq, index) => {\n        const oscillator = audioContext.createOscillator();\n        const gainNode = audioContext.createGain();\n        oscillator.connect(gainNode);\n        gainNode.connect(audioContext.destination);\n        oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);\n        oscillator.type = 'sine';\n        gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n        gainNode.gain.linearRampToValueAtTime(this.volume * 0.2, audioContext.currentTime + 0.01);\n        gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);\n        oscillator.start(audioContext.currentTime + index * 0.05);\n        oscillator.stop(audioContext.currentTime + duration + index * 0.05);\n      });\n    };\n  }\n  createFanfare() {\n    return () => {\n      if (!this.enabled) return;\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const notes = [523, 659, 784, 1047]; // C, E, G, C (octave)\n\n      notes.forEach((freq, index) => {\n        const oscillator = audioContext.createOscillator();\n        const gainNode = audioContext.createGain();\n        oscillator.connect(gainNode);\n        gainNode.connect(audioContext.destination);\n        oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);\n        oscillator.type = 'triangle';\n        const startTime = audioContext.currentTime + index * 0.15;\n        const duration = 0.3;\n        gainNode.gain.setValueAtTime(0, startTime);\n        gainNode.gain.linearRampToValueAtTime(this.volume * 0.4, startTime + 0.02);\n        gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + duration);\n        oscillator.start(startTime);\n        oscillator.stop(startTime + duration);\n      });\n    };\n  }\n  createSuccessSound() {\n    return () => {\n      if (!this.enabled) return;\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const notes = [659, 784, 988]; // E, G, B\n\n      notes.forEach((freq, index) => {\n        const oscillator = audioContext.createOscillator();\n        const gainNode = audioContext.createGain();\n        oscillator.connect(gainNode);\n        gainNode.connect(audioContext.destination);\n        oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);\n        oscillator.type = 'sine';\n        const startTime = audioContext.currentTime + index * 0.1;\n        const duration = 0.4;\n        gainNode.gain.setValueAtTime(0, startTime);\n        gainNode.gain.linearRampToValueAtTime(this.volume * 0.3, startTime + 0.02);\n        gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + duration);\n        oscillator.start(startTime);\n        oscillator.stop(startTime + duration);\n      });\n    };\n  }\n  createVictoryFanfare() {\n    return () => {\n      if (!this.enabled) return;\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const melody = [523, 659, 784, 1047, 784, 1047, 1319]; // Victory melody\n\n      melody.forEach((freq, index) => {\n        const oscillator = audioContext.createOscillator();\n        const gainNode = audioContext.createGain();\n        oscillator.connect(gainNode);\n        gainNode.connect(audioContext.destination);\n        oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);\n        oscillator.type = 'triangle';\n        const startTime = audioContext.currentTime + index * 0.2;\n        const duration = index === melody.length - 1 ? 0.8 : 0.3;\n        gainNode.gain.setValueAtTime(0, startTime);\n        gainNode.gain.linearRampToValueAtTime(this.volume * 0.5, startTime + 0.02);\n        gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + duration);\n        oscillator.start(startTime);\n        oscillator.stop(startTime + duration);\n      });\n    };\n  }\n  createCountdownSound() {\n    return timeRemaining => {\n      if (!this.enabled) return;\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n\n      // Different frequencies for different countdown numbers\n      let frequency;\n      if (timeRemaining === 1) {\n        frequency = 1200; // Highest pitch for 1\n      } else if (timeRemaining === 2) {\n        frequency = 1000; // High pitch for 2\n      } else if (timeRemaining === 3) {\n        frequency = 800; // Medium pitch for 3\n      } else if (timeRemaining === 4) {\n        frequency = 600; // Lower pitch for 4\n      } else {\n        frequency = 500; // Lowest pitch for 5\n      }\n      oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);\n      oscillator.type = 'square';\n      const duration = timeRemaining === 1 ? 0.3 : 0.2; // Longer beep for final second\n      const volume = timeRemaining === 1 ? 0.6 : 0.4; // Louder for final second\n\n      gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n      gainNode.gain.linearRampToValueAtTime(this.volume * volume, audioContext.currentTime + 0.01);\n      gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);\n      oscillator.start(audioContext.currentTime);\n      oscillator.stop(audioContext.currentTime + duration);\n    };\n  }\n\n  // Public methods to play sounds\n  playPlayerJoin() {\n    this.sounds.playerJoin();\n  }\n  playPlayerReady() {\n    this.sounds.playerReady();\n  }\n  playAllReady() {\n    this.sounds.allReady();\n  }\n  playGameStart() {\n    this.sounds.gameStart();\n  }\n  playPromptSubmitted() {\n    this.sounds.promptSubmitted();\n  }\n  playGuessSubmitted() {\n    this.sounds.guessSubmitted();\n  }\n  playRoundEnd() {\n    this.sounds.roundEnd();\n  }\n  playGameEnd() {\n    this.sounds.gameEnd();\n  }\n  playCountdown(timeRemaining) {\n    this.sounds.countdown(timeRemaining);\n  }\n\n  // Settings\n  setEnabled(enabled) {\n    this.enabled = enabled;\n  }\n  setVolume(volume) {\n    this.volume = Math.max(0, Math.min(1, volume));\n  }\n  isEnabled() {\n    return this.enabled;\n  }\n}\n\n// Create a singleton instance\nconst soundManager = new SoundManager();\nexport default soundManager;","map":{"version":3,"names":["SoundManager","constructor","sounds","enabled","volume","initializeSounds","playerJoin","createBeepSound","playerReady","allReady","createChord","gameStart","createFanfare","promptSubmitted","guessSubmitted","roundEnd","createSuccessSound","gameEnd","createVictoryFanfare","countdown","createCountdownSound","frequency","duration","waveType","audioContext","window","AudioContext","webkitAudioContext","oscillator","createOscillator","gainNode","createGain","connect","destination","setValueAtTime","currentTime","type","gain","linearRampToValueAtTime","exponentialRampToValueAtTime","start","stop","frequencies","forEach","freq","index","notes","startTime","melody","length","timeRemaining","playPlayerJoin","playPlayerReady","playAllReady","playGameStart","playPromptSubmitted","playGuessSubmitted","playRoundEnd","playGameEnd","playCountdown","setEnabled","setVolume","Math","max","min","isEnabled","soundManager"],"sources":["C:/Users/siddh/Desktop/Sid/Work/Co-curriculars/KiroHackathon/client/src/utils/soundManager.js"],"sourcesContent":["class SoundManager {\r\n  constructor() {\r\n    this.sounds = {};\r\n    this.enabled = true;\r\n    this.volume = 0.7;\r\n    this.initializeSounds();\r\n  }\r\n\r\n  initializeSounds() {\r\n    // Create audio contexts for different sound effects\r\n    this.sounds = {\r\n      playerJoin: this.createBeepSound(800, 0.1, 'sine'),\r\n      playerReady: this.createBeepSound(600, 0.15, 'square'),\r\n      allReady: this.createChord([523, 659, 784], 0.3), // C major chord\r\n      gameStart: this.createFanfare(),\r\n      promptSubmitted: this.createBeepSound(1000, 0.2, 'triangle'),\r\n      guessSubmitted: this.createBeepSound(400, 0.1, 'sawtooth'),\r\n      roundEnd: this.createSuccessSound(),\r\n      gameEnd: this.createVictoryFanfare(),\r\n      countdown: this.createCountdownSound()\r\n    };\r\n  }\r\n\r\n  createBeepSound(frequency, duration, waveType = 'sine') {\r\n    return () => {\r\n      if (!this.enabled) return;\r\n      \r\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n      const oscillator = audioContext.createOscillator();\r\n      const gainNode = audioContext.createGain();\r\n      \r\n      oscillator.connect(gainNode);\r\n      gainNode.connect(audioContext.destination);\r\n      \r\n      oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);\r\n      oscillator.type = waveType;\r\n      \r\n      gainNode.gain.setValueAtTime(0, audioContext.currentTime);\r\n      gainNode.gain.linearRampToValueAtTime(this.volume * 0.3, audioContext.currentTime + 0.01);\r\n      gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);\r\n      \r\n      oscillator.start(audioContext.currentTime);\r\n      oscillator.stop(audioContext.currentTime + duration);\r\n    };\r\n  }\r\n\r\n  createChord(frequencies, duration) {\r\n    return () => {\r\n      if (!this.enabled) return;\r\n      \r\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n      \r\n      frequencies.forEach((freq, index) => {\r\n        const oscillator = audioContext.createOscillator();\r\n        const gainNode = audioContext.createGain();\r\n        \r\n        oscillator.connect(gainNode);\r\n        gainNode.connect(audioContext.destination);\r\n        \r\n        oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);\r\n        oscillator.type = 'sine';\r\n        \r\n        gainNode.gain.setValueAtTime(0, audioContext.currentTime);\r\n        gainNode.gain.linearRampToValueAtTime(this.volume * 0.2, audioContext.currentTime + 0.01);\r\n        gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);\r\n        \r\n        oscillator.start(audioContext.currentTime + index * 0.05);\r\n        oscillator.stop(audioContext.currentTime + duration + index * 0.05);\r\n      });\r\n    };\r\n  }\r\n\r\n  createFanfare() {\r\n    return () => {\r\n      if (!this.enabled) return;\r\n      \r\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n      const notes = [523, 659, 784, 1047]; // C, E, G, C (octave)\r\n      \r\n      notes.forEach((freq, index) => {\r\n        const oscillator = audioContext.createOscillator();\r\n        const gainNode = audioContext.createGain();\r\n        \r\n        oscillator.connect(gainNode);\r\n        gainNode.connect(audioContext.destination);\r\n        \r\n        oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);\r\n        oscillator.type = 'triangle';\r\n        \r\n        const startTime = audioContext.currentTime + index * 0.15;\r\n        const duration = 0.3;\r\n        \r\n        gainNode.gain.setValueAtTime(0, startTime);\r\n        gainNode.gain.linearRampToValueAtTime(this.volume * 0.4, startTime + 0.02);\r\n        gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + duration);\r\n        \r\n        oscillator.start(startTime);\r\n        oscillator.stop(startTime + duration);\r\n      });\r\n    };\r\n  }\r\n\r\n  createSuccessSound() {\r\n    return () => {\r\n      if (!this.enabled) return;\r\n      \r\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n      const notes = [659, 784, 988]; // E, G, B\r\n      \r\n      notes.forEach((freq, index) => {\r\n        const oscillator = audioContext.createOscillator();\r\n        const gainNode = audioContext.createGain();\r\n        \r\n        oscillator.connect(gainNode);\r\n        gainNode.connect(audioContext.destination);\r\n        \r\n        oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);\r\n        oscillator.type = 'sine';\r\n        \r\n        const startTime = audioContext.currentTime + index * 0.1;\r\n        const duration = 0.4;\r\n        \r\n        gainNode.gain.setValueAtTime(0, startTime);\r\n        gainNode.gain.linearRampToValueAtTime(this.volume * 0.3, startTime + 0.02);\r\n        gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + duration);\r\n        \r\n        oscillator.start(startTime);\r\n        oscillator.stop(startTime + duration);\r\n      });\r\n    };\r\n  }\r\n\r\n  createVictoryFanfare() {\r\n    return () => {\r\n      if (!this.enabled) return;\r\n      \r\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n      const melody = [523, 659, 784, 1047, 784, 1047, 1319]; // Victory melody\r\n      \r\n      melody.forEach((freq, index) => {\r\n        const oscillator = audioContext.createOscillator();\r\n        const gainNode = audioContext.createGain();\r\n        \r\n        oscillator.connect(gainNode);\r\n        gainNode.connect(audioContext.destination);\r\n        \r\n        oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);\r\n        oscillator.type = 'triangle';\r\n        \r\n        const startTime = audioContext.currentTime + index * 0.2;\r\n        const duration = index === melody.length - 1 ? 0.8 : 0.3;\r\n        \r\n        gainNode.gain.setValueAtTime(0, startTime);\r\n        gainNode.gain.linearRampToValueAtTime(this.volume * 0.5, startTime + 0.02);\r\n        gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + duration);\r\n        \r\n        oscillator.start(startTime);\r\n        oscillator.stop(startTime + duration);\r\n      });\r\n    };\r\n  }\r\n\r\n  createCountdownSound() {\r\n    return (timeRemaining) => {\r\n      if (!this.enabled) return;\r\n      \r\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n      const oscillator = audioContext.createOscillator();\r\n      const gainNode = audioContext.createGain();\r\n      \r\n      oscillator.connect(gainNode);\r\n      gainNode.connect(audioContext.destination);\r\n      \r\n      // Different frequencies for different countdown numbers\r\n      let frequency;\r\n      if (timeRemaining === 1) {\r\n        frequency = 1200; // Highest pitch for 1\r\n      } else if (timeRemaining === 2) {\r\n        frequency = 1000; // High pitch for 2\r\n      } else if (timeRemaining === 3) {\r\n        frequency = 800;  // Medium pitch for 3\r\n      } else if (timeRemaining === 4) {\r\n        frequency = 600;  // Lower pitch for 4\r\n      } else {\r\n        frequency = 500;  // Lowest pitch for 5\r\n      }\r\n      \r\n      oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);\r\n      oscillator.type = 'square';\r\n      \r\n      const duration = timeRemaining === 1 ? 0.3 : 0.2; // Longer beep for final second\r\n      const volume = timeRemaining === 1 ? 0.6 : 0.4;   // Louder for final second\r\n      \r\n      gainNode.gain.setValueAtTime(0, audioContext.currentTime);\r\n      gainNode.gain.linearRampToValueAtTime(this.volume * volume, audioContext.currentTime + 0.01);\r\n      gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);\r\n      \r\n      oscillator.start(audioContext.currentTime);\r\n      oscillator.stop(audioContext.currentTime + duration);\r\n    };\r\n  }\r\n\r\n  // Public methods to play sounds\r\n  playPlayerJoin() {\r\n    this.sounds.playerJoin();\r\n  }\r\n\r\n  playPlayerReady() {\r\n    this.sounds.playerReady();\r\n  }\r\n\r\n  playAllReady() {\r\n    this.sounds.allReady();\r\n  }\r\n\r\n  playGameStart() {\r\n    this.sounds.gameStart();\r\n  }\r\n\r\n  playPromptSubmitted() {\r\n    this.sounds.promptSubmitted();\r\n  }\r\n\r\n  playGuessSubmitted() {\r\n    this.sounds.guessSubmitted();\r\n  }\r\n\r\n  playRoundEnd() {\r\n    this.sounds.roundEnd();\r\n  }\r\n\r\n  playGameEnd() {\r\n    this.sounds.gameEnd();\r\n  }\r\n\r\n  playCountdown(timeRemaining) {\r\n    this.sounds.countdown(timeRemaining);\r\n  }\r\n\r\n  // Settings\r\n  setEnabled(enabled) {\r\n    this.enabled = enabled;\r\n  }\r\n\r\n  setVolume(volume) {\r\n    this.volume = Math.max(0, Math.min(1, volume));\r\n  }\r\n\r\n  isEnabled() {\r\n    return this.enabled;\r\n  }\r\n}\r\n\r\n// Create a singleton instance\r\nconst soundManager = new SoundManager();\r\n\r\nexport default soundManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}